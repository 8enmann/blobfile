# all public symbols from this package
# this must be created manually based on type data from the existing functions

from typing import (
    overload,
    Any,
    BinaryIO,
    TextIO,
    Callable,
    IO,
    Iterator,
    NamedTuple,
    Optional,
    Sequence,
    Tuple,
    Type,
    Literal,
)

class Stat(NamedTuple):
    size: int
    mtime: float

def set_log_callback(fn: Callable[[str], None]) -> None: ...
def copy(
    src: str, dst: str, overwrite: bool = ..., return_md5: bool = ...
) -> Optional[str]: ...
def exists(path: str) -> bool: ...
def glob(pattern: str) -> Iterator[str]: ...
def isdir(path: str) -> bool: ...
def listdir(path: str) -> Iterator[str]: ...
def makedirs(path: str) -> None: ...
def remove(path: str) -> None: ...
def rmdir(path: str) -> None: ...
def stat(path: str) -> Stat: ...
def walk(
    top: str, topdown: bool = ..., onerror: Optional[Callable] = ...
) -> Iterator[Tuple[str, Sequence[str], Sequence[str]]]: ...
def basename(path: str) -> str: ...
def dirname(path: str) -> str: ...
def join(a: str, *args: str) -> str: ...
def get_url(path: str) -> Tuple[str, Optional[float]]: ...
def md5(path: str) -> str: ...

MODE = Literal["r", "rb", "w", "wb"]
@overload
def BlobFile(path: str, mode: Literal["rb"], buffer_size: int = ...) -> BinaryIO: ...
@overload
def BlobFile(path: str, mode: Literal["wb"], buffer_size: int = ...) -> BinaryIO: ...
@overload
def BlobFile(path: str, mode: Literal["r"], buffer_size: int = ...) -> TextIO: ...
@overload
def BlobFile(path: str, mode: Literal["w"], buffer_size: int = ...) -> TextIO: ...
def BlobFile(path: str, mode: MODE = "r", buffer_size: int = ...) -> IO: ...
@overload
def LocalBlobFile(
    path: str, mode: Literal["rb"], cache_dir: Optional[str] = ...
) -> BinaryIO: ...
@overload
def LocalBlobFile(
    path: str, mode: Literal["wb"], cache_dir: Optional[str] = ...
) -> BinaryIO: ...
@overload
def LocalBlobFile(
    path: str, mode: Literal["r"], cache_dir: Optional[str] = ...
) -> TextIO: ...
@overload
def LocalBlobFile(
    path: str, mode: Literal["w"], cache_dir: Optional[str] = ...
) -> TextIO: ...
def LocalBlobFile(
    path: str, mode: MODE = "r", cache_dir: Optional[str] = ...
) -> IO: ...

