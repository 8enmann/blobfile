from typing import Mapping, Any, IO, AnyStr, Any, Union, Optional, Callable, Tuple

def parse(
    xml_input=Union[str, bytes, IO[AnyStr]],
    encoding: Optional[str] = ...,
    expat: Any = ...,
    process_namespaces: bool = ...,
    namespace_separator: str = ...,
    disable_entities: bool = ...,
    xml_attribs: bool = ...,
    item_depth: int = ...,
    item_callback: Callable = ...,
    xml_attribs: bool = ...,
    attr_prefix: str = ...,
    cdata_key: str = ...,
    force_cdata: bool = ...,
    cdata_separator: str = ...,
    postprocessor: Optional[Callable] = ...,
    dict_constructor: Any = ...,
    strip_whitespace: bool = ...,
    namespace_separator: str = ...,
    namespaces: Optional[Mapping[str, str]] = ...,
    force_list: Optional[Tuple] = ...,
) -> Mapping[str, Any]: ...
def unparse(
    input_dict: Mapping[str, Any],
    output: Optional[IO[AnyStr]] = ...,
    encoding: str = ...,
    full_document: bool = ...,
    short_empty_elements=False,
    attr_prefix: str = ...,
    cdata_key: str = ...,
    depth: int = ...,
    preprocessor: Optional[Callable] = ...,
    pretty: bool = ...,
    newl: str = ...,
    indent: str = ...,
    namespace_separator: str = ...,
    namespaces: Optional[Mapping[str, str]] = ...,
    full_document: bool = ...,
) -> str: ...

